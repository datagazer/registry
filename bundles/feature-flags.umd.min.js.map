{"version":3,"sources":["ng://@datagazer/feature-flags/lib/services/feature-flags.service.ts","ng://@datagazer/feature-flags/lib/directives/feature-flag.directive.ts","ng://@datagazer/feature-flags/lib/guards/feature-flag.guard.ts","ng://@datagazer/feature-flags/lib/feature-flags.module.ts"],"names":["FEATURE_FLAGS","InjectionToken","FeatureFlagsService","_featureFlags","this","prototype","isEnabled","feature","Boolean","Injectable","args","providedIn","Inject","FeatureFlagDirective","_templateRef","_viewContainerRef","Object","defineProperty","clear","createEmbeddedView","Directive","selector","TemplateRef","ViewContainerRef","Input","FeatureFlagGuard","canActivate","_a","data","modules","FoundationModule","directives","FeatureFlagsModule","NgModule","imports","__spread","declarations","exports"],"mappings":"iZAGaA,EAAgB,IAAIC,EAAAA,eAA6B,iBAE9DC,EAAA,WAIE,SAAAA,EAEmBC,GAAAC,KAAAD,cAAAA,SAGZD,EAAAG,UAAAC,UAAP,SAAiBC,GACf,OAAOC,QAAQJ,KAAKD,cAAcI,yBAVrCE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EAITC,EAAAA,OAAMF,KAAA,CAACV,8HALZ,gBCWE,SAAAa,EACmBC,EACAC,EAEAZ,GAHAC,KAAAU,aAAAA,EACAV,KAAAW,kBAAAA,EAEAX,KAAAD,cAAAA,EAErB,OAfEa,OAAAC,eACWJ,EAAAR,UAAA,gBAAa,KADxB,SACyBE,GACvBH,KAAKW,kBAAkBG,QAEnBd,KAAKD,cAAcG,UAAUC,IAC/BH,KAAKW,kBAAkBI,mBAAmBf,KAAKU,mEATpDM,EAAAA,UAASV,KAAA,CAAC,CACTW,SAAU,+DAJeC,EAAAA,mBAAaC,EAAAA,wBAC/BrB,4CAMNsB,EAAAA,SAeHX,kBCdE,SAAAY,EACmBtB,GAAAC,KAAAD,cAAAA,SAGZsB,EAAApB,UAAAqB,YAAP,SAAmBC,OAAUpB,EAAAoB,EAAAC,KAAArB,QAC3B,OAAOH,KAAKD,cAAcG,UAAUC,wBATvCE,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHLT,2hBCGH2B,EAAU,CACdC,EAAAA,kBAMIC,EAAa,CACjBlB,GAGFmB,EAAA,WAAA,SAAAA,KAciC,2BAdhCC,EAAAA,SAAQvB,KAAA,CAAC,CACRwB,QAAOC,EACFN,GAGLO,aAAYD,EACPJ,GAGLM,QAAOF,EACFN,EACAE,OAG0BC,EAdjC","sourcesContent":["import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { FeatureFlags } from '../types/feature-flags';\n\nexport const FEATURE_FLAGS = new InjectionToken<FeatureFlags>('Feature Flags');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeatureFlagsService {\n  constructor(\n    @Inject(FEATURE_FLAGS)\n    private readonly _featureFlags: FeatureFlags\n  ) {}\n\n  public isEnabled(feature: string): boolean {\n    return Boolean(this._featureFlags[feature]);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureFlagsService } from '../services/feature-flags.service';\n\n@Directive({\n  selector: '[dgFeatureFlag]'\n})\nexport class FeatureFlagDirective {\n  @Input()\n  public set dgFeatureFlag(feature: string) {\n    this._viewContainerRef.clear();\n\n    if (this._featureFlags.isEnabled(feature)) {\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n  }\n\n  constructor(\n    private readonly _templateRef: TemplateRef<never>,\n    private readonly _viewContainerRef: ViewContainerRef,\n\n    private readonly _featureFlags: FeatureFlagsService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { FeatureFlagsService } from '../services/feature-flags.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeatureFlagGuard implements CanActivate {\n  constructor(\n    private readonly _featureFlags: FeatureFlagsService\n  ) {}\n\n  public canActivate({ data: { feature } }: ActivatedRouteSnapshot): boolean {\n    return this._featureFlags.isEnabled(feature);\n  }\n}\n","import { NgModule } from '@angular/core';\n\n// Modules\nimport { FoundationModule } from '@datagazer/foundation';\n\nconst modules = [\n  FoundationModule\n];\n\n// Directives\nimport { FeatureFlagDirective } from './directives/feature-flag.directive';\n\nconst directives = [\n  FeatureFlagDirective\n];\n\n@NgModule({\n  imports: [\n    ...modules\n  ],\n\n  declarations: [\n    ...directives\n  ],\n\n  exports: [\n    ...modules,\n    ...directives\n  ]\n})\nexport class FeatureFlagsModule {}\n"]}
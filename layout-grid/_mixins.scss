@import './variables';

@mixin dg-layout-grid-core() {
  @each $media-type, $breakpoint in $dg-layout-grid--breakpoints {
    $query: map-get($breakpoint, 'query');

    @media #{$query} {
      --dg-layout-grid--columns: #{map-get($breakpoint, 'columns')};
      --dg-layout-grid--gutters: #{map-get($breakpoint, 'gutters')};
      --dg-layout-grid--margins: #{map-get($breakpoint, 'margins')};
    }
  }

  --dg-layout-grid--max-width: #{$dg-layout-grid--max-width};
}

@mixin dg-layout-grid() {
  display: grid !important;

  grid: {
    template: auto / repeat(var(--dg-layout-grid--columns), 1fr);
  }

  gap: var(--dg-layout-grid--gutters);

  align: {
    content: stretch;
    items: stretch;
  }

  justify: {
    content: stretch;
    items: stretch;
  }
}

@mixin dg-layout-grid-cell($column-span) {
  grid: {
    column-end: span $column-span;
  }
}

@mixin dg-layout-column() {
  display: grid !important;

  grid: {
    auto-flow: row;
  }

  gap: var(--dg-layout-grid--gutters);

  align: {
    content: start;
    items: center;
  }

  justify: {
    content: stretch;
    items: stretch;
  }
}

@mixin dg-layout-row() {
  display: grid !important;

  grid: {
    auto-flow: column;
  }

  gap: var(--dg-layout-grid--gutters);

  align: {
    content: stretch;
    items: center;
  }

  justify: {
    content: start;
    items: stretch;
  }
}

@mixin dg-layout-box() {
  padding: var(--dg-layout-grid--margins);
}

@mixin dg-layout-container() {
  max: {
    width: var(--dg-layout-grid--max-width);
  }

  margin: 0 auto;
}
